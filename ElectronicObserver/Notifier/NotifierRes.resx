<?xml version="1.0" encoding="utf-8"?>
<root>
	<!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
	<xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
		<xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
		<xsd:element name="root" msdata:IsDataSet="true">
			<xsd:complexType>
				<xsd:choice maxOccurs="unbounded">
					<xsd:element name="metadata">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" />
							</xsd:sequence>
							<xsd:attribute name="name" use="required" type="xsd:string" />
							<xsd:attribute name="type" type="xsd:string" />
							<xsd:attribute name="mimetype" type="xsd:string" />
							<xsd:attribute ref="xml:space" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="assembly">
						<xsd:complexType>
							<xsd:attribute name="alias" type="xsd:string" />
							<xsd:attribute name="name" type="xsd:string" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="data">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
								<xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
							<xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
							<xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
							<xsd:attribute ref="xml:space" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="resheader">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" />
						</xsd:complexType>
					</xsd:element>
				</xsd:choice>
			</xsd:complexType>
		</xsd:element>
	</xsd:schema>
	<resheader name="resmimetype">
		<value>text/microsoft-resx</value>
	</resheader>
	<resheader name="version">
		<value>2.0</value>
	</resheader>
	<resheader name="reader">
		<value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<resheader name="writer">
		<value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<data name="AnchorageRepair" xml:space="preserve">
    <value>泊地修理発動</value>
  </data>
	<data name="AnchorageRepairFinished" xml:space="preserve">
    <value>泊地修理の開始から20分が経過しました。</value>
  </data>
	<data name="ConditionText" xml:space="preserve">
    <value>#{0} 「{1}」に所属する艦娘の疲労が回復しました。</value>
  </data>
	<data name="ConditionTitle" xml:space="preserve">
    <value>疲労回復</value>
  </data>
	<data name="ConstructionText" xml:space="preserve">
    <value>工廠ドック #{0} で「{1}」の建造が完了しました。</value>
  </data>
	<data name="ConstructionTitle" xml:space="preserve">
    <value>建造完了</value>
  </data>
	<data name="DamagedText" xml:space="preserve">
    <value>{0} が大破しています！</value>
  </data>
	<data name="DamagedTitle" xml:space="preserve">
    <value>！大破警告！</value>
  </data>
	<data name="ExpeditionText" xml:space="preserve">
    <value>#{0} 「{1}」が遠征「{2}: {3}」から帰投しました。</value>
  </data>
	<data name="ExpeditionTitle" xml:space="preserve">
    <value>遠征帰投</value>
  </data>
	<data name="FailedPlaySound" xml:space="preserve">
    <value>通知システム: 通知音の再生に失敗しました。</value>
  </data>
	<data name="FailedToLoadImage" xml:space="preserve">
    <value>通知システム: 通知画像 {0} の読み込みに失敗しました。</value>
  </data>
	<data name="FailedToLoadSound" xml:space="preserve">
    <value>通知システム: 通知音 {0} のロードに失敗しました。</value>
  </data>
	<data name="RemodelText" xml:space="preserve">
    <value>{0}は{1}に改造出来ます。</value>
  </data>
	<data name="RemodelTitle" xml:space="preserve">
    <value>改造可能</value>
  </data>
	<data name="RepairText" xml:space="preserve">
    <value>入渠ドック #{0} で「{1}」の修復が完了しました。</value>
  </data>
	<data name="RepairTitle" xml:space="preserve">
    <value>入渠完了</value>
  </data>
	<data name="AdmiralExp" xml:space="preserve">
    <value>提督Exp+</value>
  </data>
	<data name="ShipExp" xml:space="preserve">
    <value>艦娘Exp+</value>
  </data>
	<data name="ExpeditionResult" xml:space="preserve">
    <value>遠征結果 - </value>
  </data>
	<data name="NoResourcesGained" xml:space="preserve">
    <value>獲得資源なし</value>
  </data>
	<data name="ShipLevelUp" xml:space="preserve">
    <value>{0} が Lv. {1} になりました。</value>
  </data>
	<data name="ShipsResupplied" xml:space="preserve">
    <value>補給を行いました。消費: </value>
  </data>
	<data name="BauxiteConsumedByAddingPlaneToAirBase" xml:space="preserve">
    <value>基地航空隊の編成により、ボーキ {0} が消費されました。</value>
  </data>
	<data name="AirBaseResupplyCost" xml:space="preserve">
    <value>#{0}「{1}」へ補給を行いました。消費: 燃料x{2}, ボーキサイトx{3}</value>
  </data>
	<data name="ExpansionSlotOpened" xml:space="preserve">
    <value>{0} の補強装備増設改修が完了しました。</value>
  </data>
	<data name="ShipSuccessfullyRemodeled" xml:space="preserve">
    <value>{0} Lv. {1} への改装が完了しました。</value>
  </data>
	<data name="EquipmentHasBenScrapped" xml:space="preserve">
    <value>{0}{1} を廃棄しました。</value>
  </data>
	<data name="ShipHasBeenScrapped" xml:space="preserve">
    <value>{0} を解体しました。</value>
  </data>
	<data name="SortieingTo" xml:space="preserve">
    <value>⚓ {0}-{1}-{2}: {3}に出撃します</value>
  </data>
	<data name="HasSortiedTo" xml:space="preserve">
    <value>#{0}「{1}」が「{2}-{3} {4}」へ出撃しました。</value>
  </data>
	<data name="HasBeenSentToExpedition" xml:space="preserve">
    <value>#{0}「{1}」が遠征「{2}: {3}」へ出撃しました。</value>
  </data>
	<data name="StartedRepairingShip" xml:space="preserve">
    <value>入渠ドック #{0}で {1} ({2}/{3}) の修復を開始しました。(燃料x{4}, 鋼材x{5}, {6})</value>
  </data>
	<data name="BucketUsed" xml:space="preserve">
    <value>高速修復材x1</value>
  </data>
	<data name="ETA" xml:space="preserve">
    <value>修理完了予定: </value>
  </data>
</root>