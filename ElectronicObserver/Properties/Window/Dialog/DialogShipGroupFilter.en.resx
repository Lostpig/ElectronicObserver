<?xml version="1.0" encoding="utf-8"?>
<root>
	<!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
	<xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
		<xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
		<xsd:element name="root" msdata:IsDataSet="true">
			<xsd:complexType>
				<xsd:choice maxOccurs="unbounded">
					<xsd:element name="metadata">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" />
							</xsd:sequence>
							<xsd:attribute name="name" use="required" type="xsd:string" />
							<xsd:attribute name="type" type="xsd:string" />
							<xsd:attribute name="mimetype" type="xsd:string" />
							<xsd:attribute ref="xml:space" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="assembly">
						<xsd:complexType>
							<xsd:attribute name="alias" type="xsd:string" />
							<xsd:attribute name="name" type="xsd:string" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="data">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
								<xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
							<xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
							<xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
							<xsd:attribute ref="xml:space" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="resheader">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" />
						</xsd:complexType>
					</xsd:element>
				</xsd:choice>
			</xsd:complexType>
		</xsd:element>
	</xsd:schema>
	<resheader name="resmimetype">
		<value>text/microsoft-resx</value>
	</resheader>
	<resheader name="version">
		<value>2.0</value>
	</resheader>
	<resheader name="reader">
		<value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<resheader name="writer">
		<value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<data name="ClearConstFilter" xml:space="preserve">
    <value>Clear</value>
  </data>
	<data name="ConvertToExpression" xml:space="preserve">
    <value>Convert to expression</value>
  </data>
	<data name="Description" xml:space="preserve">
    <value>(Description)</value>
  </data>
	<data name="Expression_Add" xml:space="preserve">
    <value>Add</value>
  </data>
	<data name="Expression_Delete" xml:space="preserve">
    <value>Delete</value>
  </data>
	<data name="ExpressionDetail_Add" xml:space="preserve">
    <value>Add</value>
  </data>
	<data name="ExpressionDetail_Delete" xml:space="preserve">
    <value>Delete</value>
  </data>
	<data name="ExpressionDetail_Edit" xml:space="preserve">
    <value>Edit</value>
  </data>
	<data name="ExpressionDetailView_LeftOperand" xml:space="preserve">
    <value>Left operand</value>
  </data>
	<data name="ExpressionDetailView_Operator" xml:space="preserve">
    <value>Operator</value>
  </data>
	<data name="ExpressionDetailView_RightOperand" xml:space="preserve">
    <value>Right operand</value>
  </data>
	<data name="ExpressionView_Expression" xml:space="preserve">
    <value>Expression</value>
  </data>
	<data name="ExpressionView_ExternalAndOr" xml:space="preserve">
    <value>External</value>
  </data>
	<data name="ExpressionView_InternalAndOr" xml:space="preserve">
    <value>Internal</value>
  </data>
	<data name="ExpressionView_Inverse" xml:space="preserve">
    <value>Inverse</value>
  </data>
	<data name="label1" xml:space="preserve">
    <value>This is the list of ships that will be included/excluded, regardless of the content of the filter.
You can add them from the right-click menu in the group itself.</value>
  </data>
	<data name="OptimizeConstFilter" xml:space="preserve">
    <value>Optimize</value>
  </data>
	<data name="tabPage1" xml:space="preserve">
    <value>Filter</value>
  </data>
	<data name="tabPage2" xml:space="preserve">
    <value>Inclusion/exclusion list</value>
  </data>
	<data name="ExpressionDetailView_Enabled" xml:space="preserve">
    <value>○</value>
  </data>
	<data name="ExpressionView_Up" xml:space="preserve">
    <value>↑</value>
  </data>
	<data name="ExpressionView_Down" xml:space="preserve">
    <value>↓</value>
  </data>
	<data name="ClearConstFilter_ToolTip" xml:space="preserve">
    <value>Remove all the contents of the list.</value>
  </data>
	<data name="ExpressionView_Down_ToolTip" xml:space="preserve">
    <value>Down</value>
  </data>
	<data name="ExpressionView_Up_ToolTip" xml:space="preserve">
    <value>Up</value>
  </data>
	<data name="ConvertToExpression_ToolTip" xml:space="preserve">
    <value>Converts inclusion/exclusion lists to expressions.
Note that reverse conversion is not possible.</value>
  </data>
	<data name="OptimizeConstFilter_ToolTip" xml:space="preserve">
    <value>Remove non-existent ships from the list.</value>
  </data>
	<data name="ExpressionDetailView_Enabled_ToolTip" xml:space="preserve">
    <value>Enable/Disable</value>
  </data>
	<data name="ExpressionView_Enabled" xml:space="preserve">
    <value>Enable/Disable</value>
  </data>
	<data name="ExpressionView_Inverse_ToolTip" xml:space="preserve">
    <value>Reversing the conditions</value>
  </data>
	<data name="SelectARow" xml:space="preserve">
    <value>Select the row you want to delete.</value>
  </data>
	<data name="SelectExpressionRow" xml:space="preserve">
    <value>Select the row of the expression (on the left) that you want to use.
If the row does not exist, add it.</value>
  </data>
	<data name="SelectSequence" xml:space="preserve">
    <value>Select the target sequence (left side).</value>
  </data>
	<data name="SelectTargetRow" xml:space="preserve">
    <value>Select the row you want to target.</value>
  </data>
	<data name="ClearFilterWarningTitle" xml:space="preserve">
    <value>Confirmation of initialization</value>
  </data>
	<data name="ClearFilterWarning" xml:space="preserve">
    <value>Are you sure you want to initialize {0}?</value>
  </data>
	<data name="ConvertToExpressionWarning" xml:space="preserve">
    <value>Converts the current inclusion/exclusion list to an expression.
You cannot reverse the conversion.
Are you sure?</value>
  </data>
	<data name="ImportFilterFromClipboard" xml:space="preserve">
    <value>Imports a filter from the clipboard.
The current filter is discarded. (Inclusion/exclusion filters will be kept.)
Are you sure?</value>
  </data>
	<data name="ImportFilterFromClipboardTitle" xml:space="preserve">
    <value>Checking the import of a filter</value>
  </data>
	<data name="ClipboardIsEmpty" xml:space="preserve">
    <value>The clipboard is empty.
Copy the filter data and select it again.</value>
  </data>
	<data name="CanNotImport" xml:space="preserve">
    <value>Can't import</value>
  </data>
	<data name="FormatCanNotBeImported" xml:space="preserve">
    <value>This data format can't be imported</value>
  </data>
	<data name="FilterImportFailed" xml:space="preserve">
    <value>The import of the filter failed.</value>
  </data>
	<data name="FilterWasExported" xml:space="preserve">
    <value>The filter was exported to the clipboard.
Use "Import Filters" to import them, or paste them into Notepad and save them.</value>
  </data>
	<data name="FilterExportFailed" xml:space="preserve">
    <value>The export of the filter failed.</value>
  </data>
	<data name="ExportingFilterTitle" xml:space="preserve">
    <value>Exporting Filters</value>
  </data>
	<data name="CanNotExport" xml:space="preserve">
    <value>Can't export</value>
  </data>
	<data name="ConstFilterView_Name" xml:space="preserve">
    <value>Name</value>
  </data>
	<data name="ConstFilterSelector_InclusionList" xml:space="preserve">
    <value>Inclusion List</value>
  </data>
	<data name="ConstFilterSelector_ExclusionList" xml:space="preserve">
    <value>Exclusion List</value>
  </data>
	<data name="ButtonMenu" xml:space="preserve">
    <value>Menu ▼</value>
  </data>
	<data name="SubMenu_ImportFilter" xml:space="preserve">
    <value>&amp;Import Filter</value>
  </data>
	<data name="SubMenu_ExportFilter" xml:space="preserve">
    <value>&amp;Export filter</value>
  </data>
	<data name="Title" xml:space="preserve">
    <value>Filter Settings</value>
  </data>
	<data name="Error" xml:space="preserve">
    <value>Error</value>
  </data>
</root>